

Example AST for above tokens
bodyExp
    exp_list
            declareExp
                id=number_one
                type=integer
                const=True
                val=numExp
                        num=13
            setExp
                id=number_one
                val=numExp
                        num=31







                    bodyExp
                    src=listExp

                    listExp
                    items=[]

                    dictExp
                    pairs={}

                    stringExp
                    str=""

                    numExp
                    num=0

                    boolExp
                    flag=True

                    valueExp
                    val=13

                    retrieveExp
                    src=fib

                    declareExp
        id=number_one       type=integer    val=valExp

                    declareExp
    id=add_numbers      type=function   const=True  val=funcExp

                    funcExp
        id=add_numbers      args=listExp    src= bodyExp

                    setExp
        id=number_one       val=valExp

                    callExp
            id=print    args=listExp

                    whileExp
            cond=condExp    body=bodyExp

                    breakExp

                    jumpExp

                    forExp
            list=listExp    body=bodyExp

                    returnExp
                    val=valExp

                    ifExp
            cond=condExp    body=bodyExp

                    orExp
            cond=condExp    body=bodyExp

                    tryExp
                    body = bodyExp

                    catchExp
            id=valExp       body=bodyExp

                    assertExp
                    cond=condExp

                    exitExp







class ExprNode:
    char c
    ExprNode operand1
    ExprNode operand2

    ExprNode(char num):
        c = num
        operand1 = operand2 = nil

    Expr(char op, ExprNode e1, ExprNode e2):
        c = op
        operand1 = e1
        operand2 = e2

# Parser
ExprNode parse(string input):
    char c
    while (c = input.getNextChar()):
        if (c == '('):
            operatorStack.push(c)

        else if (c.isDigit()):
            exprStack.push(ExprNode(c))

        else if (c.isOperator()):
            while(operatorStack.top().precedence >= c.precedence):
                operator = operatorStack.pop()
                # Careful! The second operand was pushed last.
                e2 = exprStack.pop()
                e1 = exprStack.pop()
                exprStack.push(ExprNode(operator, e1, e2))

            operatorStack.push(c)

        else if (c == ')'):
            while (operatorStack.top() != '('):
                operator = operatorStack.pop()
                # Careful! The second operand was pushed last.
                e2 = exprStack.pop()
                e1 = exprStack.pop()
                exprStack.push(ExprNode(operator, e1, e2))

            # Pop the '(' off the operator stack.
            operatorStack.pop()

        else:
            error()
            return nil

    # There should only be one item on exprStack.
    # It's the root node, so we return it.
    return exprStack.pop()





Token modification 

old:
('kw', 'declare')
('kw', 'nonchangeable')
('kw', 'construct')
('kw', 'named')
('id', 'number_one')
('kw', 'of')
('kw', 'type')
('type', 'integer')
('kw', 'with')
('kw', 'value')
('val', 13)
('kw', 'semicolon')
('kw', 'set')
('kw', 'construct')
('kw', 'named')
('id', 'number_one')
('kw', 'with')
('id', '31')
('kw', 'semicolon')

new:
('kw', 'declare')
('kw', 'nonchangeable')
('id', 'number_one')
('type', 'integer')
('val', 13)
('kw', 'semicolon')
('kw', 'set')
('id', 'number_one')
('val', 31)
('kw', 'semicolon')

